# Form implementation generated from reading ui file 'TaskApp.ui'
#
# Created by: PyQt6 UI code generator 6.3.1
#
# WARNING: Any manual changes made to this file will be lost when pyuic6 is
# run again.  Do not edit this file unless you know what you are doing.

from PyQt6 import QtCore, QtGui, QtWidgets
import datetime
from qdarktheme import load_stylesheet
import os
from playsound import playsound
import calendar as c
import sqlite3
from threading import Timer, Thread
import time
import ctypes

#Settings database
set_conn = sqlite3.connect('task_settings.db')
cur = set_conn.cursor()
cur.execute("""CREATE TABLE if not exists saved_settings(
    setting text)
""")

set_conn.commit()
set_conn.close()

task_conn = sqlite3.connect('task_database.db')
cur = task_conn.cursor()

cur.execute("""CREATE TABLE if not exists task_table(
    task text
)""")

task_conn.commit()
task_conn.close()

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        #Main Window
        MainWindow.setObjectName("MainWindow")
        MainWindow.resize(642, 235)
        MainWindow.setFixedSize(642, 235)
        self.MainWindow = MainWindow
        self.MainWindow.show()

        CURRENT_DIRECTORY = os.path.dirname(os.path.realpath(__file__))
        icon = QtGui.QIcon(os.path.join(CURRENT_DIRECTORY, "magnifying_glass.png"))
        MainWindow.setWindowIcon(QtGui.QIcon(icon))
        myappid = 'task_application' # arbitrary string
        ctypes.windll.shell32.SetCurrentProcessExplicitAppUserModelID(myappid)

        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.cal = c.Calendar()
        self.task_list = []
        self.settings_list = []
        self.alarm = 'Alarm 01'
        self.theme = 'Dark'

        #Other
        self.year_list = [2022, 2023, 2024, 2025, 2026, 2027, 2028, 2029, 2030]
        self.month_list = ['01', '02', '03', '04', '05', '06', '07', '08', '09', '10', '11', '12']
        self.hour_list = [str(i) for i in range(1, 13)]
        self.min_list = [str(i) for i in range(1, 60)]
        self.timer_on = False
        self.t = None
        self.next_call = time.time()
        self.timer_setup()

        #Tray Setup
        self.tray = QtWidgets.QSystemTrayIcon(MainWindow)
        CURRENT_DIRECTORY = os.path.dirname(os.path.realpath(__file__))
        icon = QtGui.QIcon(os.path.join(CURRENT_DIRECTORY, "magnifying_glass.png"))
        self.tray.setIcon(icon)
        
        show_cmd = QtGui.QAction("Show", MainWindow)
        hide_cmd = QtGui.QAction("Hide", MainWindow)
        exit_cmd = QtGui.QAction("Exit", MainWindow)

        show_cmd.triggered.connect(MainWindow.show)
        hide_cmd.triggered.connect(self.tray.hide)
        exit_cmd.triggered.connect(app.exit)

        tray_menu = QtWidgets.QMenu()
        self.tray.setContextMenu(tray_menu)

        tray_menu.addAction(show_cmd)
        tray_menu.addAction(hide_cmd)
        tray_menu.addAction(exit_cmd)

        self.tray.show()

        #Side Button Frame
        self.frame = QtWidgets.QFrame(self.centralwidget)
        self.frame.setGeometry(QtCore.QRect(-20, -40, 151, 661))
        self.frame.setFrameShape(QtWidgets.QFrame.Shape.Box)
        self.frame.setFrameShadow(QtWidgets.QFrame.Shadow.Plain)
        self.frame.setLineWidth(2)
        self.frame.setObjectName("frame")

        #Add Tasks Button
        self.push_add_tasks = QtWidgets.QPushButton(self.frame, clicked=lambda:self.change_page('add_tasks'))
        self.push_add_tasks.setGeometry(QtCore.QRect(30, 110, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.push_add_tasks.setFont(font)
        self.push_add_tasks.setIconSize(QtCore.QSize(16, 16))
        self.push_add_tasks.setObjectName("push_add_tasks")

        #Settings Button
        self.push_settings = QtWidgets.QPushButton(self.frame, clicked=lambda:self.change_page('settings'))
        self.push_settings.setGeometry(QtCore.QRect(30, 170, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        font.setBold(False)
        font.setWeight(50)
        self.push_settings.setFont(font)
        self.push_settings.setStyleSheet("")
        self.push_settings.setIconSize(QtCore.QSize(16, 16))
        self.push_settings.setObjectName("push_settings")

        #Exit Button
        self.push_exit = QtWidgets.QPushButton(self.frame, clicked=lambda:self.exit_app())
        self.push_exit.setGeometry(QtCore.QRect(30, 230, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.push_exit.setFont(font)
        self.push_exit.setIconSize(QtCore.QSize(16, 16))
        self.push_exit.setObjectName("push_exit")

        #View Tasks Button
        self.push_view_tasks = QtWidgets.QPushButton(self.frame,clicked=lambda:self.change_page('view_tasks'))
        self.push_view_tasks.setGeometry(QtCore.QRect(30, 50, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(14)
        self.push_view_tasks.setFont(font)
        self.push_view_tasks.setIconSize(QtCore.QSize(16, 16))
        self.push_view_tasks.setObjectName("push_view_tasks")

        #Save Settings Button
        self.push_save_settings = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.save_settings())
        self.push_save_settings.setGeometry(324, 190, 111, 31)
        font = QtGui.QFont()
        font.setPointSize(17)
        self.push_save_settings.setFont(font)
        self.push_save_settings.setObjectName("push_save_settings")

        #App Theme Label
        self.label_app_theme = QtWidgets.QLabel(self.centralwidget)
        self.label_app_theme.setGeometry(QtCore.QRect(230, 40, 151, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_app_theme.setFont(font)
        self.label_app_theme.setObjectName("label_app_theme")

        #App Theme Combobox
        self.combo_app_theme = QtWidgets.QComboBox(self.centralwidget)
        self.combo_app_theme.setGeometry(QtCore.QRect(410, 50, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.combo_app_theme.setFont(font)
        self.combo_app_theme.setObjectName("combo_app_theme")
        self.combo_app_theme.addItem("")
        self.combo_app_theme.addItem("")

        #Label Alarm Sound
        self.label_alarm_sound = QtWidgets.QLabel(self.centralwidget)
        self.label_alarm_sound.setGeometry(QtCore.QRect(230, 110, 171, 51))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_alarm_sound.setFont(font)
        self.label_alarm_sound.setObjectName("label_alarm_sound")

        #Combobox Alarm Sound
        self.combo_alarm_sound = QtWidgets.QComboBox(self.centralwidget)
        self.combo_alarm_sound.setGeometry(QtCore.QRect(410, 120, 111, 31))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.combo_alarm_sound.setFont(font)
        self.combo_alarm_sound.setObjectName("combo_alarm_sound")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")
        self.combo_alarm_sound.addItem("")

        #Year Combobox
        self.combo_year = QtWidgets.QComboBox(self.centralwidget)
        self.combo_year.setGeometry(QtCore.QRect(550, 90, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_year.setFont(font)
        self.combo_year.setObjectName("combo_year")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.addItem("")
        self.combo_year.activated.connect(lambda: self.update_days(self.combo_year.currentText(), self.combo_month.currentIndex() + 1))

        #Semicolon Label
        self.label_semicolon = QtWidgets.QLabel(self.centralwidget)
        self.label_semicolon.setGeometry(QtCore.QRect(260, 170, 21, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_semicolon.setFont(font)
        self.label_semicolon.setObjectName("label_semicolon")

        #AM/PM Combobox
        self.combo_am_pm = QtWidgets.QComboBox(self.centralwidget)
        self.combo_am_pm.setGeometry(QtCore.QRect(340, 170, 51, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_am_pm.setFont(font)
        self.combo_am_pm.setObjectName("combo_am_pm")
        self.combo_am_pm.addItem("")
        self.combo_am_pm.addItem("")

        #Task Submit button
        self.push_submit = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.add_task())
        self.push_submit.setGeometry(QtCore.QRect(530, 170, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.push_submit.setFont(font)
        self.push_submit.setObjectName("push_submit")

        #Test Alarm button
        self.push_test_alarm = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.test_alert())
        self.push_test_alarm.setGeometry(530, 120, 51, 31)
        font = QtGui.QFont()
        font.setPointSize(15)
        self.push_test_alarm.setFont(font)
        self.push_test_alarm.setObjectName("push_test_alarm")
        self.push_test_alarm.setVisible(False)

        #Delete Task button
        self.push_delete_task = QtWidgets.QPushButton(self.centralwidget, clicked=lambda:self.delete_task())
        self.push_delete_task.setGeometry(QtCore.QRect(310, 200, 151, 23))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.push_delete_task.setFont(font)
        self.push_delete_task.setObjectName("push_delete_task")

        #Task Title Label
        self.label_task_title = QtWidgets.QLabel(self.centralwidget)
        self.label_task_title.setGeometry(QtCore.QRect(130, 10, 111, 41))
        font = QtGui.QFont()
        font.setPointSize(20)
        self.label_task_title.setFont(font)
        self.label_task_title.setObjectName("label_task_title")

        #Minutes Combobox
        self.combo_time_minutes = QtWidgets.QComboBox(self.centralwidget)
        self.combo_time_minutes.setGeometry(QtCore.QRect(280, 170, 51, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_time_minutes.setFont(font)
        self.combo_time_minutes.setObjectName("combo_time_minutes")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")
        self.combo_time_minutes.addItem("")

        #Month Combobox
        self.combo_month = QtWidgets.QComboBox(self.centralwidget)
        self.combo_month.setGeometry(QtCore.QRect(210, 90, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_month.setFont(font)
        self.combo_month.setObjectName("combo_month")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.addItem("")
        self.combo_month.activated.connect(lambda: self.update_days(self.combo_year.currentText(), self.combo_month.currentIndex() + 1))
        
        #Year Combobox
        self.label_year = QtWidgets.QLabel(self.centralwidget)
        self.label_year.setGeometry(QtCore.QRect(490, 90, 61, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_year.setFont(font)
        self.label_year.setObjectName("label_year")

        #Alarm On/Alarm Off Combobox
        self.combo_alarm = QtWidgets.QComboBox(self.centralwidget)
        self.combo_alarm.setGeometry(QtCore.QRect(410, 170, 101, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_alarm.setFont(font)
        self.combo_alarm.setObjectName("combo_alarm")
        self.combo_alarm.addItem("")
        self.combo_alarm.addItem("")

        #Task Title Line Edit
        self.line_task_title = QtWidgets.QLineEdit(self.centralwidget)
        self.line_task_title.setGeometry(QtCore.QRect(210, 10, 421, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.line_task_title.setFont(font)
        self.line_task_title.setClearButtonEnabled(False)
        self.line_task_title.setObjectName("line_task_title")

        #Time Label
        self.label_time = QtWidgets.QLabel(self.centralwidget)
        self.label_time.setGeometry(QtCore.QRect(130, 170, 71, 41))
        font = QtGui.QFont()
        font.setPointSize(17)
        self.label_time.setFont(font)
        self.label_time.setObjectName("label_time")

        #Month Label
        self.label_month = QtWidgets.QLabel(self.centralwidget)
        self.label_month.setGeometry(QtCore.QRect(130, 90, 81, 41))
        font = QtGui.QFont()
        font.setPointSize(16)
        self.label_month.setFont(font)
        self.label_month.setObjectName("label_month")

        #Day Combobox
        self.combo_day = QtWidgets.QComboBox(self.centralwidget)
        self.combo_day.setGeometry(QtCore.QRect(390, 90, 91, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_day.setFont(font)
        self.combo_day.setObjectName("combo_day")

        #Day Label
        self.label_day = QtWidgets.QLabel(self.centralwidget)
        self.label_day.setGeometry(QtCore.QRect(330, 90, 61, 41))
        font = QtGui.QFont()
        font.setPointSize(15)
        self.label_day.setFont(font)
        self.label_day.setObjectName("label_day")

        #Hour Combobox
        self.combo_time_hour = QtWidgets.QComboBox(self.centralwidget)
        self.combo_time_hour.setGeometry(QtCore.QRect(210, 170, 51, 41))
        font = QtGui.QFont()
        font.setPointSize(12)
        self.combo_time_hour.setFont(font)
        self.combo_time_hour.setObjectName("combo_time_hour")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")
        self.combo_time_hour.addItem("")

        #Task List View
        self.list_tasks = QtWidgets.QListWidget(self.centralwidget)
        self.list_tasks.setGeometry(QtCore.QRect(150, 10, 471, 181))
        self.list_tasks.setObjectName("list_tasks")

        #Other
        MainWindow.setCentralWidget(self.centralwidget)
        self.actionGear = QtGui.QAction(MainWindow)
        icon = QtGui.QIcon()
        icon.addPixmap(QtGui.QPixmap("../../../../../reshot-icon-gear-C5ADLKU2RN.png"), QtGui.QIcon.Mode.Normal, QtGui.QIcon.State.Off)
        self.actionGear.setIcon(icon)
        self.actionGear.setObjectName("actionGear")

        #Stylesheet
        app.setStyleSheet(load_stylesheet())

        #Start up setup
        self.current_page = 'view_tasks'

        #Hide Add Task Items
        self.label_task_title.setVisible(False)
        self.line_task_title.setVisible(False)

        self.label_month.setVisible(False)
        self.label_day.setVisible(False)
        self.label_year.setVisible(False)

        self.combo_month.setVisible(False)
        self.combo_day.setVisible(False)
        self.combo_year.setVisible(False)

        self.label_time.setVisible(False)
        self.label_semicolon.setVisible(False)

        self.combo_time_hour.setVisible(False)
        self.combo_time_minutes.setVisible(False)
        self.combo_am_pm.setVisible(False)

        self.combo_alarm.setVisible(False)

        self.push_submit.setVisible(False)

        #Hide Setting Items
        self.label_app_theme.setVisible(False)
        self.label_alarm_sound.setVisible(False)

        self.combo_app_theme.setVisible(False)
        self.combo_alarm_sound.setVisible(False)

        self.push_save_settings.setVisible(False)
        self.push_test_alarm.setVisible(False)

        #Gui Setup
        self.auto_setup()
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
    
    def change_page(self, new_page):
        if self.current_page == new_page:
            return False
        else:
            if self.current_page == 'add_tasks':
                self.label_task_title.setVisible(False)
                self.line_task_title.setVisible(False)

                self.label_month.setVisible(False)
                self.label_day.setVisible(False)
                self.label_year.setVisible(False)

                self.combo_month.setVisible(False)
                self.combo_day.setVisible(False)
                self.combo_year.setVisible(False)

                self.label_time.setVisible(False)
                self.label_semicolon.setVisible(False)

                self.combo_time_hour.setVisible(False)
                self.combo_time_minutes.setVisible(False)
                self.combo_am_pm.setVisible(False)

                self.combo_alarm.setVisible(False)

                self.push_submit.setVisible(False)
            
            elif self.current_page == 'view_tasks':
                self.list_tasks.setVisible(False)
                self.push_delete_task.setVisible(False)
            
            else:
                self.label_app_theme.setVisible(False)
                self.label_alarm_sound.setVisible(False)

                self.combo_app_theme.setVisible(False)
                self.combo_alarm_sound.setVisible(False)

                self.push_save_settings.setVisible(False)
                self.push_test_alarm.setVisible(False)

        if new_page == 'add_tasks':
            self.current_page = 'add_tasks'
            self.label_task_title.setVisible(True)
            self.line_task_title.setVisible(True)

            self.label_month.setVisible(True)
            self.label_day.setVisible(True)
            self.label_year.setVisible(True)

            self.combo_month.setVisible(True)
            self.combo_day.setVisible(True)
            self.combo_year.setVisible(True)

            self.label_time.setVisible(True)
            self.label_semicolon.setVisible(True)

            self.combo_time_hour.setVisible(True)
            self.combo_time_minutes.setVisible(True)
            self.combo_am_pm.setVisible(True)

            #self.combo_alarm.setVisible(True)

            self.push_submit.setVisible(True)

            #Setup values
            self.line_task_title.setText('')

            self.year, self.month, self.day = str(datetime.date.today()).split('-')
            self.time_hour = datetime.datetime.now().strftime('%H')
            self.time_min = str(int(datetime.datetime.now().strftime('%M')))

            self.combo_year.setCurrentIndex(self.year_list.index(int(self.year)))
            self.combo_month.setCurrentIndex(self.month_list.index(self.month))
            self.update_days(self.year, self.month)
            self.combo_day.setCurrentIndex(int(self.day) - 1)

            if int(self.time_hour) > 12:
                self.time_hour = str(int(self.time_hour) - 12)
                self.combo_am_pm.setCurrentIndex(1)

            if (int(self.time_min) < 2 or int(self.time_min) > 58):
                pass
            else:
                self.combo_time_minutes.setCurrentIndex(self.min_list.index(self.time_min) + 1)

            self.combo_time_hour.setCurrentIndex(self.hour_list.index(self.time_hour))
            
        elif new_page == 'view_tasks':
            self.current_page = 'view_tasks'

            self.list_tasks.setVisible(True)
            self.push_delete_task.setVisible(True)

        elif new_page == 'settings':
            self.current_page = 'settings'

            self.label_app_theme.setVisible(True)
            #self.label_alarm_sound.setVisible(True)

            self.combo_app_theme.setVisible(True)
            #self.combo_alarm_sound.setVisible(True)

            #if self.alarm[-1] == '0':
                #self.combo_alarm_sound.setCurrentIndex(9)
            #else:
                #self.combo_alarm_sound.setCurrentIndex(int(self.alarm[-1]) - 1)

            if self.theme == 'Dark':
                self.combo_app_theme.setCurrentIndex(0)
            else:
                self.combo_app_theme.setCurrentIndex(1)

            self.push_save_settings.setVisible(True)
            #self.push_test_alarm.setVisible(True)

    def add_task(self):
        task_title = self.line_task_title.text()

        if len(task_title) > 30 or len(task_title) < 1:
            msg_title_len_error = QtWidgets.QMessageBox(MainWindow)
            msg_title_len_error.setWindowTitle("Title Length Error")
            msg_title_len_error.setText("Error: The task's title must be between 1 and 30 characters.")
            msg_title_len_error.show()
            return False

        task_year = self.combo_year.currentText()
        task_month = str( int(self.combo_month.currentIndex()) + 1)
        task_day = str( int(self.combo_day.currentIndex()) + 1)

        if int(task_month) < 10:
            task_month = f'0{task_month}'
        
        if int(task_day) < 10:
            task_day = f'0{task_day}'

        task_date = f'{task_month}/{task_day}/{task_year}'

        task_hour = self.combo_time_hour.currentText()
        task_min = self.combo_time_minutes.currentText()
        view_task_time = f'{task_hour}:{task_min} {self.combo_am_pm.currentText()}'

        if self.combo_am_pm.currentText() == "PM":
            if task_hour != "12":
                task_hour = str(int(task_hour) + 12)

        if self.combo_am_pm.currentText() == "AM":
            if task_hour == '12':
                task_hour = '00'

        task_time = f'{task_hour}:{task_min}'
        
        #task_alarm = self.combo_alarm.currentText()

        task = f'{task_title}\{task_date}\{view_task_time}'
        
        if (datetime.datetime.strptime(task_date, "%m/%d/%Y").date() < datetime.date.today()):
            msg_date_error = QtWidgets.QMessageBox(MainWindow)
            msg_date_error.setWindowTitle("Date Error")
            msg_date_error.setText("Error: The task must take place on the same date or a later date than today.")
            msg_date_error.show()
            return False

        elif (datetime.datetime.strptime(task_date, "%m/%d/%Y").date() == datetime.date.today()):
            if (datetime.datetime.strptime(task_time, "%H:%M").time().strftime("%H:%M") <= datetime.datetime.now().time().strftime("%H:%M")):
                msg_time_error = QtWidgets.QMessageBox(MainWindow)
                msg_time_error.setWindowTitle("Time Error")
                msg_time_error.setText("Error: The task must take place at a future time.")
                msg_time_error.show()
                return False
        
        self.list_tasks.addItem(task.replace("\\", "\t"))
        
        self.line_task_title.setText('')
        self.change_page('view_tasks')
        self.update_tasks()

    def update_days(self, year, month):
        self.combo_day.clear()

        for day in self.cal.itermonthdates(int(year), int(month)):
            if day.month == int(month):
                self.combo_day.addItem(f'{day.strftime("%A")[0:3]}, {day.day}')

    def run(self):
        self.timer_on = False
        self.timer_setup()
        self.timeout()

    def timer_setup(self):
        if not self.timer_on:
            self.next_call += 58.0
            self.t = Timer(self.next_call - time.time(), self.run)
            self.t.daemon = True
            self.t.start()
            self.timer_on = True

    def timeout(self):
        for i in self.task_list:
            if (i.text().split('\t')[1] == datetime.date.today().strftime("%m/%d/%Y")):
                temp = (i.text().split('\t')[2])
                temp2 = temp[0:-3]
                temp2 = temp2.split(':')
                
                if 'PM' in temp:
                    if int(temp2[0]) == 12:
                        pass
                    else:
                        temp2[0] = str(int(temp2[0]) + 12)
                
                if 'AM' in temp:
                    if int(temp2[0]) == '12':
                        temp2[0] == '00'

                cur_time = f'{temp2[0]}:{temp2[1]}'
                
                if (cur_time == datetime.datetime.now().strftime("%H:%M")):
                    self.list_tasks.takeItem(self.list_tasks.row(i))
                    self.update_tasks()

                    #if 'On' in i.text().split('\t')[3]:
                        #s = Thread(self.play_alert()).start()

                    #Alert Dialog
                    dlg = QtWidgets.QDialog(MainWindow)
                    dlg.parent = MainWindow
                    dlg.setWindowTitle("Alert")
                    dlg.setWindowFlags(QtCore.Qt.WindowType.WindowStaysOnTopHint)
                    alert_msg = QtWidgets.QLabel(i.text().split('\t')[0], dlg)

                    if len(i.text().split('\t')[0]) < 6:
                        alert_msg.move(70, 20)
                        alert_msg.setFont(QtGui.QFont("MS Shell Dlg 2", 50))

                    elif len(i.text().split('\t')[0]) < 11:
                        alert_msg.move(30, 20)
                        alert_msg.setFont(QtGui.QFont("MS Shell Dlg 2", 40))

                    elif len(i.text().split('\t')[0]) < 16:
                        alert_msg.move(10, 20)
                        alert_msg.setFont(QtGui.QFont("MS Shell Dlg 2", 30))

                    elif len(i.text().split('\t')[0]) < 21:
                        alert_msg.move(0, 20)
                        alert_msg.setFont(QtGui.QFont("MS Shell Dlg 2", 20))

                    elif len(i.text().split('\t')[0]) < 26:
                        alert_msg.move(0, 20)
                        alert_msg.setFont(QtGui.QFont("MS Shell Dlg 2", 16))
                    
                    else:
                        alert_msg.move(30, 20)
                        alert_msg.setFont(QtGui.QFont("MS Shell Dlg 2", 13))

                    dlg.move(500,500)
                    dlg.setFixedSize(300, 100)
                    dlg.exec()

    def update_tasks(self):
        task_conn = sqlite3.connect('task_database.db')
        cur = task_conn.cursor()

        cur.execute('DELETE FROM task_table;',)

        task_list_temp = []

        for i in range(self.list_tasks.count()):
            task_list_temp.append(self.list_tasks.item(i))
            
        
        self.task_list.clear()
        for item in task_list_temp:
            self.task_list.append(item)

            cur.execute("INSERT INTO task_table VALUES (:item)",
                {
                    'item': item.text(),
                })

        task_conn.commit()
        task_conn.close()

    def exit_app(self):
        MainWindow.close()

    def test_alert(self):
        sound = self.combo_alarm_sound.currentText() + '.wav'
        dir_path = os.path.dirname(os.path.realpath(__file__))

        playsound(os.path.join(dir_path, sound))

    def play_alert(self):
        sound = self.alarm + '.wav'
        dir_path = os.path.dirname(os.path.realpath(__file__))

        playsound(os.path.join(dir_path, sound))

    def delete_task(self):
        task = self.list_tasks.currentRow()
        self.list_tasks.takeItem(task)

        self.update_tasks()

    def auto_setup(self):
        set_conn = sqlite3.connect('task_settings.db')
        cur = set_conn.cursor()
        
        cur.execute("SELECT * FROM saved_settings")
        records = cur.fetchall()

        set_conn.commit()
        set_conn.close()

        try:
            if records[0][0] == 'Dark':
                self.theme = 'Dark'
                app.setStyleSheet(load_stylesheet())
            else:
                self.theme = 'Light'
                app.setStyleSheet(load_stylesheet('light'))

            self.alarm = records[1][0]

        except IndexError:
            pass

        task_conn = sqlite3.connect('task_database.db')
        cur = task_conn.cursor()

        cur.execute("SELECT * FROM task_table")
        records = cur.fetchall()

        for i in records:
            #If task date > today's date add task
            if (datetime.datetime.strptime(str(i[0]).split('\t')[1], "%m/%d/%Y").date() > datetime.date.today()):
                self.list_tasks.addItem(str(i[0]))

            #If task date == today's date and task's time > today's time add task
            if (datetime.datetime.strptime(str(i[0]).split('\t')[1], "%m/%d/%Y").date() == datetime.date.today()):
                temp = (str(i[0]).split('\t')[2])
                temp2 = temp[0:-3]
                temp2 = temp2.split(':')
                
                if 'PM' in temp:
                    if int(temp2[0]) == 12:
                        pass
                    else:
                        temp2[0] = str(int(temp2[0]) + 12)
                
                if 'AM' in temp:
                    if int(temp2[0]) == 12:
                        temp2[0] == '00'

                cur_time = f'{temp2[0]}:{temp2[1]}'
                if (cur_time > datetime.datetime.now().time().strftime("%H:%M")):
                    self.list_tasks.addItem(str(i[0]))

        task_conn.commit()
        task_conn.close()
        self.update_tasks()

    def save_settings(self):
        if self.combo_app_theme.currentText() == 'Light':
            app.setStyleSheet(load_stylesheet('light'))
        else:
            app.setStyleSheet(load_stylesheet())

        self.settings_list.clear()
        self.settings_list.append(self.combo_app_theme.currentText())
        self.settings_list.append(self.combo_alarm_sound.currentText())
        
        set_conn = sqlite3.connect('task_settings.db')
        cur = set_conn.cursor()
        
        cur.execute("DELETE FROM saved_settings;",)

        for i in self.settings_list:
            cur.execute("INSERT INTO saved_settings VALUES (:item)",
                {
                    'item': i
                })

        set_conn.commit()
        set_conn.close()

        self.alarm = self.combo_alarm_sound.currentText()

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", "Task App"))
        self.push_add_tasks.setText(_translate("MainWindow", "Add Task"))
        self.push_save_settings.setText(_translate("MainWindow", "Save"))
        self.push_test_alarm.setText(_translate("MainWindow", "Test"))
        self.push_delete_task.setText(_translate("MainWindow", "Delete Task"))
        self.push_settings.setText(_translate("MainWindow", "Settings"))
        self.push_exit.setText(_translate("MainWindow", "Exit"))
        self.push_view_tasks.setText(_translate("MainWindow", "View Tasks"))
        self.label_app_theme.setText(_translate("MainWindow", "App Theme:"))
        self.combo_app_theme.setItemText(0, _translate("MainWindow", "Dark"))
        self.combo_app_theme.setItemText(1, _translate("MainWindow", "Light"))
        self.label_alarm_sound.setText(_translate("MainWindow", "Alarm Sound:"))
        self.combo_alarm_sound.setItemText(0, _translate("MainWindow", "Alarm 1"))
        self.combo_alarm_sound.setItemText(1, _translate("MainWindow", "Alarm 2"))
        self.combo_alarm_sound.setItemText(2, _translate("MainWindow", "Alarm 3"))
        self.combo_alarm_sound.setItemText(3, _translate("MainWindow", "Alarm 4"))
        self.combo_alarm_sound.setItemText(4, _translate("MainWindow", "Alarm 5"))
        self.combo_alarm_sound.setItemText(5, _translate("MainWindow", "Alarm 6"))
        self.combo_alarm_sound.setItemText(6, _translate("MainWindow", "Alarm 7"))
        self.combo_alarm_sound.setItemText(7, _translate("MainWindow", "Alarm 8"))
        self.combo_alarm_sound.setItemText(8, _translate("MainWindow", "Alarm 9"))
        self.combo_alarm_sound.setItemText(9, _translate("MainWindow", "Alarm 10"))
        self.combo_year.setItemText(0, _translate("MainWindow", "2022"))
        self.combo_year.setItemText(1, _translate("MainWindow", "2023"))
        self.combo_year.setItemText(2, _translate("MainWindow", "2024"))
        self.combo_year.setItemText(3, _translate("MainWindow", "2025"))
        self.combo_year.setItemText(4, _translate("MainWindow", "2026"))
        self.combo_year.setItemText(5, _translate("MainWindow", "2027"))
        self.combo_year.setItemText(6, _translate("MainWindow", "2028"))
        self.combo_year.setItemText(7, _translate("MainWindow", "2029"))
        self.combo_year.setItemText(8, _translate("MainWindow", "2030"))
        self.label_semicolon.setText(_translate("MainWindow", ":"))
        self.combo_am_pm.setItemText(0, _translate("MainWindow", "AM"))
        self.combo_am_pm.setItemText(1, _translate("MainWindow", "PM"))
        self.push_submit.setText(_translate("MainWindow", "Submit"))
        self.label_task_title.setText(_translate("MainWindow", "Title:"))
        self.combo_time_minutes.setItemText(0, _translate("MainWindow", "00"))
        self.combo_time_minutes.setItemText(1, _translate("MainWindow", "01"))
        self.combo_time_minutes.setItemText(2, _translate("MainWindow", "02"))
        self.combo_time_minutes.setItemText(3, _translate("MainWindow", "03"))
        self.combo_time_minutes.setItemText(4, _translate("MainWindow", "04"))
        self.combo_time_minutes.setItemText(5, _translate("MainWindow", "05"))
        self.combo_time_minutes.setItemText(6, _translate("MainWindow", "06"))
        self.combo_time_minutes.setItemText(7, _translate("MainWindow", "07"))
        self.combo_time_minutes.setItemText(8, _translate("MainWindow", "08"))
        self.combo_time_minutes.setItemText(9, _translate("MainWindow", "09"))
        self.combo_time_minutes.setItemText(10, _translate("MainWindow", "10"))
        self.combo_time_minutes.setItemText(11, _translate("MainWindow", "11"))
        self.combo_time_minutes.setItemText(12, _translate("MainWindow", "12"))
        self.combo_time_minutes.setItemText(13, _translate("MainWindow", "13"))
        self.combo_time_minutes.setItemText(14, _translate("MainWindow", "14"))
        self.combo_time_minutes.setItemText(15, _translate("MainWindow", "15"))
        self.combo_time_minutes.setItemText(16, _translate("MainWindow", "16"))
        self.combo_time_minutes.setItemText(17, _translate("MainWindow", "17"))
        self.combo_time_minutes.setItemText(18, _translate("MainWindow", "18"))
        self.combo_time_minutes.setItemText(19, _translate("MainWindow", "19"))
        self.combo_time_minutes.setItemText(20, _translate("MainWindow", "20"))
        self.combo_time_minutes.setItemText(21, _translate("MainWindow", "21"))
        self.combo_time_minutes.setItemText(22, _translate("MainWindow", "22"))
        self.combo_time_minutes.setItemText(23, _translate("MainWindow", "23"))
        self.combo_time_minutes.setItemText(24, _translate("MainWindow", "24"))
        self.combo_time_minutes.setItemText(25, _translate("MainWindow", "25"))
        self.combo_time_minutes.setItemText(26, _translate("MainWindow", "26"))
        self.combo_time_minutes.setItemText(27, _translate("MainWindow", "27"))
        self.combo_time_minutes.setItemText(28, _translate("MainWindow", "28"))
        self.combo_time_minutes.setItemText(29, _translate("MainWindow", "29"))
        self.combo_time_minutes.setItemText(30, _translate("MainWindow", "30"))
        self.combo_time_minutes.setItemText(31, _translate("MainWindow", "31"))
        self.combo_time_minutes.setItemText(32, _translate("MainWindow", "32"))
        self.combo_time_minutes.setItemText(33, _translate("MainWindow", "33"))
        self.combo_time_minutes.setItemText(34, _translate("MainWindow", "34"))
        self.combo_time_minutes.setItemText(35, _translate("MainWindow", "35"))
        self.combo_time_minutes.setItemText(36, _translate("MainWindow", "36"))
        self.combo_time_minutes.setItemText(37, _translate("MainWindow", "37"))
        self.combo_time_minutes.setItemText(38, _translate("MainWindow", "38"))
        self.combo_time_minutes.setItemText(39, _translate("MainWindow", "39"))
        self.combo_time_minutes.setItemText(40, _translate("MainWindow", "40"))
        self.combo_time_minutes.setItemText(41, _translate("MainWindow", "41"))
        self.combo_time_minutes.setItemText(42, _translate("MainWindow", "42"))
        self.combo_time_minutes.setItemText(43, _translate("MainWindow", "43"))
        self.combo_time_minutes.setItemText(44, _translate("MainWindow", "44"))
        self.combo_time_minutes.setItemText(45, _translate("MainWindow", "45"))
        self.combo_time_minutes.setItemText(46, _translate("MainWindow", "46"))
        self.combo_time_minutes.setItemText(47, _translate("MainWindow", "47"))
        self.combo_time_minutes.setItemText(48, _translate("MainWindow", "48"))
        self.combo_time_minutes.setItemText(49, _translate("MainWindow", "49"))
        self.combo_time_minutes.setItemText(50, _translate("MainWindow", "50"))
        self.combo_time_minutes.setItemText(51, _translate("MainWindow", "51"))
        self.combo_time_minutes.setItemText(52, _translate("MainWindow", "52"))
        self.combo_time_minutes.setItemText(53, _translate("MainWindow", "53"))
        self.combo_time_minutes.setItemText(54, _translate("MainWindow", "54"))
        self.combo_time_minutes.setItemText(55, _translate("MainWindow", "55"))
        self.combo_time_minutes.setItemText(56, _translate("MainWindow", "56"))
        self.combo_time_minutes.setItemText(57, _translate("MainWindow", "57"))
        self.combo_time_minutes.setItemText(58, _translate("MainWindow", "58"))
        self.combo_time_minutes.setItemText(59, _translate("MainWindow", "59"))
        self.combo_month.setItemText(0, _translate("MainWindow", "January"))
        self.combo_month.setItemText(1, _translate("MainWindow", "February"))
        self.combo_month.setItemText(2, _translate("MainWindow", "March"))
        self.combo_month.setItemText(3, _translate("MainWindow", "April"))
        self.combo_month.setItemText(4, _translate("MainWindow", "May"))
        self.combo_month.setItemText(5, _translate("MainWindow", "June"))
        self.combo_month.setItemText(6, _translate("MainWindow", "July"))
        self.combo_month.setItemText(7, _translate("MainWindow", "August"))
        self.combo_month.setItemText(8, _translate("MainWindow", "September"))
        self.combo_month.setItemText(9, _translate("MainWindow", "October"))
        self.combo_month.setItemText(10, _translate("MainWindow", "November"))
        self.combo_month.setItemText(11, _translate("MainWindow", "December"))
        self.label_year.setText(_translate("MainWindow", "Year:"))
        self.combo_alarm.setItemText(0, _translate("MainWindow", "Alarm On"))
        self.combo_alarm.setItemText(1, _translate("MainWindow", "Alarm Off"))
        self.label_time.setText(_translate("MainWindow", "Time:"))
        self.label_month.setText(_translate("MainWindow", "Month:"))
        self.label_day.setText(_translate("MainWindow", "Day:"))
        self.combo_time_hour.setItemText(0, _translate("MainWindow", "1"))
        self.combo_time_hour.setItemText(1, _translate("MainWindow", "2"))
        self.combo_time_hour.setItemText(2, _translate("MainWindow", "3"))
        self.combo_time_hour.setItemText(3, _translate("MainWindow", "4"))
        self.combo_time_hour.setItemText(4, _translate("MainWindow", "5"))
        self.combo_time_hour.setItemText(5, _translate("MainWindow", "6"))
        self.combo_time_hour.setItemText(6, _translate("MainWindow", "7"))
        self.combo_time_hour.setItemText(7, _translate("MainWindow", "8"))
        self.combo_time_hour.setItemText(8, _translate("MainWindow", "9"))
        self.combo_time_hour.setItemText(9, _translate("MainWindow", "10"))
        self.combo_time_hour.setItemText(10, _translate("MainWindow", "11"))
        self.combo_time_hour.setItemText(11, _translate("MainWindow", "12"))
        self.actionGear.setText(_translate("MainWindow", "Gear"))

if __name__ == "__main__":
    import sys
    app = QtWidgets.QApplication(sys.argv)
    app.setQuitOnLastWindowClosed(False)
    MainWindow = QtWidgets.QMainWindow()
    ui = Ui_MainWindow()
    ui.setupUi(MainWindow)
    MainWindow.show()
    sys.exit(app.exec())
    #input()